# -*- coding: utf-8 -*-
"""CNN_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1upAdPc5IKN8o52YCDgrIw6-ESwXbraxK
"""

import logging

logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.DEBUG)

import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Embedding, Flatten, Dropout
from keras.layers.pooling import MaxPooling1D
from keras.layers.convolutional import Conv1D
from keras.regularizers import l2
from keras.callbacks import EarlyStopping
import gensim
from keras.preprocessing.sequence import pad_sequences
from keras.models import load_model
import numpy as np
import keras
import os
import argparse

from google.colab import drive
drive.mount('/content/drive')

def token_to_index(token, dictionary):
    """
    Given a token and a gensim dictionary, return the token index
    if in the dictionary, None otherwise.
    Reserve index 0 for padding.
    """
    if token not in dictionary.token2id:
        return None
    return dictionary.token2id[token] + 1

def texts_to_indices(text, dictionary):
    """
    Given a list of tokens (text) and a gensim dictionary, return a list
    of token ids.
    """
    result = list(map(lambda x: token_to_index(x, dictionary), text))
    return list(filter(None, result))

# read in processed data
review_df = pd.read_csv("drive/My Drive/text analytics hw3/review_data.csv")
review_df = review_df[review_df.doc_len>0]
review_df = review_df[['review','label']]
review_df['review_tokenized'] = review_df['review'].str.split()

texts = review_df['review_tokenized'].to_list()
labels = review_df['label'].to_list()

mydict = gensim.corpora.Dictionary(texts)

model = load_model('drive/My Drive/text analytics hw3/amazon_cnn_2.model')

def predict_op(test_input):
  MAX_SEQUENCE_LENGTH = 517
  test_texts_indices =  texts_to_indices(test_input, mydict)
  x_data = pad_sequences([test_texts_indices], maxlen=MAX_SEQUENCE_LENGTH)
  pred_class = model.predict_classes(x_data)
  pred_prob = np.amax(model.predict(x_data))
  return(pred_class, pred_prob)

# test executions:
predict_op("this game is trash!")

predict_op("I'm so happy with this game")

predict_op("Installing this game was a struggle!")